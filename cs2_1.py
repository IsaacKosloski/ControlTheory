# -*- coding: utf-8 -*-
"""CS2-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/136FJMPQtQ0WLYiHcEWzHElDHBCwR08dF

#Obtendo função de transferência em cascata, em paralelo e com realimentação (de malha fechada) com Python.

###$G_1(s) = \frac{num1}{den1} , G_2(s) = \frac{num2}{den2}$

Pag. 17
"""

import numpy as np
from scipy.signal import convolve

"""##Em serie (ou cascata)

"""

def series(num1, den1, num2, den2):
    num = convolve(num1, num2)
    den = convolve(den1, den2)
    return num, den

num1 = [1]  # Numerator coefficients of the first transfer function
den1 = [1, 2]  # Denominator coefficients of the first transfer function
num2 = [1]  # Numerator coefficients of the second transfer function
den2 = [1, 3]  # Denominator coefficients of the second transfer function

num, den = series(num1, den1, num2, den2)
print("Resulting numerator coefficients:", num)
print("Resulting denominator coefficients:", den)

"""##Em paralelo"""

def parallel(num1, den1, num2, den2):
    common_denominator = convolve(den1, den2)
    num1_padded = np.pad(num1, (0, len(common_denominator) - len(num1)))
    num2_padded = np.pad(num2, (0, len(common_denominator) - len(num2)))

    num = num1_padded + num2_padded
    den = common_denominator
    return num, den

num1 = [1]
den1 = [1, 2]
num2 = [1]
den2 = [1, 3]

num, den = parallel(num1, den1, num2, den2)
print("Resulting numerator coefficients (parallel):", num)
print("Resulting denominator coefficients (parallel):", den)

"""##Feedback"""

def feedback(num1, den1, num2, den2):
    num = convolve(num1, den2) + convolve(num2, den1)
    den = convolve(den1, den2) + convolve(num2, num2)
    return num*10, den

num1 = [1]
den1 = [1, 2]
num2 = [1]
den2 = [1, 3]

num, den = feedback(num1, den1, num2, den2)
print("Resulting numerator coefficients (feedback):", num)
print("Resulting denominator coefficients (feedback):", den)

def printTF(num, den):
    for i in range(len(num)):
        if len(num) - i == 1:
            print(num[i])
        elif len(num) - i == 2:
            print(f"{num[i]}s", end = " + ")
        else:
            nums = len(num) - i - 1
            print(f"{num[i]}s^{nums}", end = " + ")
    for i in range(len(den)):
        if len(den) == 1:
            print(den[i])
        else:
            dens = len(den) - i
            print(f"{den[i]}s^{dens}", end = " ")

printTF(num, den)

"""#Programa 2.1
pag.18
"""

#Exemplo no livro em MATLAB
num1 = [10]
den1 = [1, 2, 10]
num2 = [5]
den2 = [1, 5]

print("Serie: \n")
numSr, denSr = series(num1, den1, num2, den2)
printTF(numSr,denSr)

print("\n\nParallel: \n")
numPr, denPr = parallel(num1, den1, num2, den2)
printTF(numPr,denPr)

numFb, denFb = feedback(num1, den1, num2, den2)
printTF(num,den)

#Programa 2.1 em MATLAB
num1 = [10];
den1 = [1 2 10];
num2 = [5];
den2 = [1 5];
[num, den] = series(num1, den1, num2, den2);
printsys(num,den)

[num, den] = parallel(num1, den1, num2, den2);
printsys(num,den)

[num, den] = feedback(num1, den1, num2, den2);
printsys(num,den)

#programa 2.1 em Python
import numpy as np
from scipy.signal import convolve

def series(num1, den1, num2, den2):
    num = convolve(num1, num2)
    den = convolve(den1, den2)
    return num, den

def parallel(num1, den1, num2, den2):
    common_denominator = convolve(den1, den2)
    num1_padded = np.pad(num1, (0, len(common_denominator) - len(num1)))
    num2_padded = np.pad(num2, (0, len(common_denominator) - len(num2)))
    num = num1_padded + num2_padded
    den = common_denominator
    return num, den

def feedback(num1, den1, num2, den2):
    num = convolve(num1, den2) + convolve(num2, den1)
    den = convolve(den1, den2) + convolve(num2, num2)
    return num, den

num1 = [10]
den1 = [1, 2, 10]
num2 = [5]
den2 = [1, 5]

# Series connection
num, den = series(num1, den1, num2, den2)
print("Series connection - Numerator:", num)
print("Series connection - Denominator:", den)

# Parallel connection
num, den = parallel(num1, den1, num2, den2)
print("Parallel connection - Numerator:", num)
print("Parallel connection - Denominator:", den)

# Feedback connection
num, den = feedback(num1, den1, num2, den2)
print("Feedback connection - Numerator:", num)
print("Feedback connection - Denominator:", den)